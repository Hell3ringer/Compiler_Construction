,$,functionName,(,),{,},return,variable,;,",",boolean,int,float,main,:=,in,out,+,*,<,>,#ERROR!,and,or,if,while
S,,,,,,,,,,,S ::= program $,S ::= program $,S ::= program $,S ::= program $,,,,,,,,,,,,
program,,,,,,,,,,,program ::= functions MAIN,program ::= functions MAIN,program ::= functions MAIN,program ::= MAIN,,,,,,,,,,,,
functions,,,,,,,,,,,functions ::= function NT1,functions ::= function NT1,functions ::= function NT1,,,,,,,,,,,,,
NT1,,,,,,,,,,,NT1 ::= functions,NT1 ::= functions,NT1 ::= functions,NT1 ::= ε,,,,,,,,,,,,
function,,,,,,,,,,,function ::= type functionName ( arglist ) { statements returnStatement },function ::= type functionName ( arglist ) { statements returnStatement },function ::= type functionName ( arglist ) { statements returnStatement },,,,,,,,,,,,,
returnStatement,,,,,,,returnStatement ::= return variable ;,,,,,,,,,,,,,,,,,,,
arglist,,,,arglist ::= ε,,,,,,,arglist ::= arg NT2,arglist ::= arg NT2,arglist ::= arg NT2,,,,,,,,,,,,,
NT2,,,,NT2 ::= ε,,,,,,"NT2 ::= , arglist",,,,,,,,,,,,,,,,
arg,,,,,,,,,,,arg ::= type variable,arg ::= type variable,arg ::= type variable,,,,,,,,,,,,,
type,,,,,,,,,,,type ::= boolean,type ::= int,type ::= float,,,,,,,,,,,,,
MAIN,,,,,,,,,,,,,,MAIN ::= main ( ) { statements },,,,,,,,,,,,
statements,,,,,,statements ::= ε,statements ::= ε,statements ::= statement NT3,,,statements ::= statement NT3,statements ::= statement NT3,statements ::= statement NT3,,,statements ::= statement NT3,statements ::= statement NT3,,,,,,,,statements ::= statement NT3,statements ::= statement NT3
NT3,,,,,,NT3 ::= ε,NT3 ::= ε,,NT3 ::= ; statements,,,,,,,,,,,,,,,,,
statement,,,,,,,,statement ::= variable := NT6,,,statement ::= declaration,statement ::= declaration,statement ::= declaration,,,statement ::= input,statement ::= output,,,,,,,,statement ::= conditional,statement ::= loop
NT6,,NT6 ::= functionName ( argCallingList ),,,,,,NT6 ::= expression,,,,,,,,,,,,,,,,,,
argCallingList,,,,argCallingList ::= ε,,,,argCallingList ::= variable NT7,,,,,,,,,,,,,,,,,,
NT7,,,,NT7 ::= ε,,,,,,"NT7 ::= , argCallingList",,,,,,,,,,,,,,,,
input,,,,,,,,,,,,,,,,input ::= in ( variable ),,,,,,,,,,
output,,,,,,,,,,,,,,,,,output ::= out ( variable ),,,,,,,,,
declaration,,,,,,,,,,,declaration ::= type varlist,declaration ::= type varlist,declaration ::= type varlist,,,,,,,,,,,,,
varlist,,,,,,,,varlist ::= variable NT4,,,,,,,,,,,,,,,,,,
NT4,,,,,,NT4 ::= ε,NT4 ::= ε,,NT4 ::= ε,"NT4 ::= , varlist",,,,,,,,,,,,,,,,
expression,,,,,,,,expression ::= variable NT5,,,,,,,,,,,,,,,,,,
NT5,,,,NT5 ::= ε,,NT5 ::= ε,NT5 ::= ε,,NT5 ::= ε,,,,,,,,,NT5 ::= arithmeticOperator variable,NT5 ::= arithmeticOperator variable,NT5 ::= ε,NT5 ::= ε,NT5 ::= ε,NT5 ::= logicalOperator variable,NT5 ::= logicalOperator variable,,
arithmeticOperator,,,,,,,,,,,,,,,,,,arithmeticOperator ::= +,arithmeticOperator ::= *,,,,,,,
relationalOperator,,,,,,,,,,,,,,,,,,,,relationalOperator ::= <,relationalOperator ::= >,relationalOperator ::= ==,,,,
logicalOperator,,,,,,,,,,,,,,,,,,,,,,,logicalOperator ::= and,logicalOperator ::= or,,
conditional,,,,,,,,,,,,,,,,,,,,,,,,,conditional ::= if ( expression relationalOperator expression ) { statements },
loop,,,,,,,,,,,,,,,,,,,,,,,,,,loop ::= while ( expression relationalOperator expression ) { statements }